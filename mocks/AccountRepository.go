// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebank/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, account
func (_m *AccountRepository) CreateAccount(ctx context.Context, account model.Account) (model.Account, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Account) (model.Account, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Account) model.Account); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(model.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type AccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account model.Account
func (_e *AccountRepository_Expecter) CreateAccount(ctx interface{}, account interface{}) *AccountRepository_CreateAccount_Call {
	return &AccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, account)}
}

func (_c *AccountRepository_CreateAccount_Call) Run(run func(ctx context.Context, account model.Account)) *AccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Account))
	})
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) Return(_a0 model.Account, _a1 error) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) RunAndReturn(run func(context.Context, model.Account) (model.Account, error)) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *AccountRepository) DeleteAccount(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type AccountRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *AccountRepository_Expecter) DeleteAccount(ctx interface{}, id interface{}) *AccountRepository_DeleteAccount_Call {
	return &AccountRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *AccountRepository_DeleteAccount_Call) Run(run func(ctx context.Context, id int64)) *AccountRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AccountRepository_DeleteAccount_Call) Return(_a0 error) *AccountRepository_DeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_DeleteAccount_Call) RunAndReturn(run func(context.Context, int64) error) *AccountRepository_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByID provides a mock function with given fields: ctx, id
func (_m *AccountRepository) GetAccountByID(ctx context.Context, id int64) (*model.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByID'
type AccountRepository_GetAccountByID_Call struct {
	*mock.Call
}

// GetAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *AccountRepository_Expecter) GetAccountByID(ctx interface{}, id interface{}) *AccountRepository_GetAccountByID_Call {
	return &AccountRepository_GetAccountByID_Call{Call: _e.mock.On("GetAccountByID", ctx, id)}
}

func (_c *AccountRepository_GetAccountByID_Call) Run(run func(ctx context.Context, id int64)) *AccountRepository_GetAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AccountRepository_GetAccountByID_Call) Return(_a0 *model.Account, _a1 error) *AccountRepository_GetAccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAccountByID_Call) RunAndReturn(run func(context.Context, int64) (*model.Account, error)) *AccountRepository_GetAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountsByUserID provides a mock function with given fields: ctx, userID
func (_m *AccountRepository) GetAccountsByUserID(ctx context.Context, userID int64) ([]model.Account, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Account, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAccountsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountsByUserID'
type AccountRepository_GetAccountsByUserID_Call struct {
	*mock.Call
}

// GetAccountsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *AccountRepository_Expecter) GetAccountsByUserID(ctx interface{}, userID interface{}) *AccountRepository_GetAccountsByUserID_Call {
	return &AccountRepository_GetAccountsByUserID_Call{Call: _e.mock.On("GetAccountsByUserID", ctx, userID)}
}

func (_c *AccountRepository_GetAccountsByUserID_Call) Run(run func(ctx context.Context, userID int64)) *AccountRepository_GetAccountsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AccountRepository_GetAccountsByUserID_Call) Return(_a0 []model.Account, _a1 error) *AccountRepository_GetAccountsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAccountsByUserID_Call) RunAndReturn(run func(context.Context, int64) ([]model.Account, error)) *AccountRepository_GetAccountsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAccounts provides a mock function with given fields: ctx
func (_m *AccountRepository) GetAllAccounts(ctx context.Context) ([]model.Account, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccounts")
	}

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAllAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccounts'
type AccountRepository_GetAllAccounts_Call struct {
	*mock.Call
}

// GetAllAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AccountRepository_Expecter) GetAllAccounts(ctx interface{}) *AccountRepository_GetAllAccounts_Call {
	return &AccountRepository_GetAllAccounts_Call{Call: _e.mock.On("GetAllAccounts", ctx)}
}

func (_c *AccountRepository_GetAllAccounts_Call) Run(run func(ctx context.Context)) *AccountRepository_GetAllAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AccountRepository_GetAllAccounts_Call) Return(_a0 []model.Account, _a1 error) *AccountRepository_GetAllAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAllAccounts_Call) RunAndReturn(run func(context.Context) ([]model.Account, error)) *AccountRepository_GetAllAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// LockAccountByID provides a mock function with given fields: ctx, id
func (_m *AccountRepository) LockAccountByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for LockAccountByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_LockAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockAccountByID'
type AccountRepository_LockAccountByID_Call struct {
	*mock.Call
}

// LockAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *AccountRepository_Expecter) LockAccountByID(ctx interface{}, id interface{}) *AccountRepository_LockAccountByID_Call {
	return &AccountRepository_LockAccountByID_Call{Call: _e.mock.On("LockAccountByID", ctx, id)}
}

func (_c *AccountRepository_LockAccountByID_Call) Run(run func(ctx context.Context, id int64)) *AccountRepository_LockAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AccountRepository_LockAccountByID_Call) Return(_a0 error) *AccountRepository_LockAccountByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_LockAccountByID_Call) RunAndReturn(run func(context.Context, int64) error) *AccountRepository_LockAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockAccountByID provides a mock function with given fields: ctx, id
func (_m *AccountRepository) UnlockAccountByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnlockAccountByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_UnlockAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockAccountByID'
type AccountRepository_UnlockAccountByID_Call struct {
	*mock.Call
}

// UnlockAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *AccountRepository_Expecter) UnlockAccountByID(ctx interface{}, id interface{}) *AccountRepository_UnlockAccountByID_Call {
	return &AccountRepository_UnlockAccountByID_Call{Call: _e.mock.On("UnlockAccountByID", ctx, id)}
}

func (_c *AccountRepository_UnlockAccountByID_Call) Run(run func(ctx context.Context, id int64)) *AccountRepository_UnlockAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AccountRepository_UnlockAccountByID_Call) Return(_a0 error) *AccountRepository_UnlockAccountByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_UnlockAccountByID_Call) RunAndReturn(run func(context.Context, int64) error) *AccountRepository_UnlockAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: ctx, account
func (_m *AccountRepository) UpdateAccount(ctx context.Context, account model.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type AccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account model.Account
func (_e *AccountRepository_Expecter) UpdateAccount(ctx interface{}, account interface{}) *AccountRepository_UpdateAccount_Call {
	return &AccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, account)}
}

func (_c *AccountRepository_UpdateAccount_Call) Run(run func(ctx context.Context, account model.Account)) *AccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Account))
	})
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) Return(_a0 error) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) RunAndReturn(run func(context.Context, model.Account) error) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
