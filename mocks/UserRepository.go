// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebank/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user model.User) (model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) model.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *UserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(ctx context.Context, user model.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 model.User, _a1 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, model.User) (model.User, error)) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx, isDeleted
func (_m *UserRepository) GetAllUsers(ctx context.Context, isDeleted *bool) ([]model.User, error) {
	ret := _m.Called(ctx, isDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bool) ([]model.User, error)); ok {
		return rf(ctx, isDeleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bool) []model.User); ok {
		r0 = rf(ctx, isDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bool) error); ok {
		r1 = rf(ctx, isDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserRepository_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - isDeleted *bool
func (_e *UserRepository_Expecter) GetAllUsers(ctx interface{}, isDeleted interface{}) *UserRepository_GetAllUsers_Call {
	return &UserRepository_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx, isDeleted)}
}

func (_c *UserRepository_GetAllUsers_Call) Run(run func(ctx context.Context, isDeleted *bool)) *UserRepository_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bool))
	})
	return _c
}

func (_c *UserRepository_GetAllUsers_Call) Return(_a0 []model.User, _a1 error) *UserRepository_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetAllUsers_Call) RunAndReturn(run func(context.Context, *bool) ([]model.User, error)) *UserRepository_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByID(ctx context.Context, id int64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserRepository_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserRepository_GetUserByID_Call {
	return &UserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserRepository_GetUserByID_Call) Run(run func(ctx context.Context, id int64)) *UserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepository_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *UserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, int64) (*model.User, error)) *UserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByPhoneNumber provides a mock function with given fields: ctx, phoneNumber
func (_m *UserRepository) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (model.User, error) {
	ret := _m.Called(ctx, phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByPhoneNumber")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, phoneNumber)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByPhoneNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByPhoneNumber'
type UserRepository_GetUserByPhoneNumber_Call struct {
	*mock.Call
}

// GetUserByPhoneNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - phoneNumber string
func (_e *UserRepository_Expecter) GetUserByPhoneNumber(ctx interface{}, phoneNumber interface{}) *UserRepository_GetUserByPhoneNumber_Call {
	return &UserRepository_GetUserByPhoneNumber_Call{Call: _e.mock.On("GetUserByPhoneNumber", ctx, phoneNumber)}
}

func (_c *UserRepository_GetUserByPhoneNumber_Call) Run(run func(ctx context.Context, phoneNumber string)) *UserRepository_GetUserByPhoneNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByPhoneNumber_Call) Return(_a0 model.User, _a1 error) *UserRepository_GetUserByPhoneNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByPhoneNumber_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *UserRepository_GetUserByPhoneNumber_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) UpdateUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *UserRepository_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserRepository_UpdateUser_Call {
	return &UserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserRepository_UpdateUser_Call) Run(run func(ctx context.Context, user model.User)) *UserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserRepository_UpdateUser_Call) Return(_a0 error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_UpdateUser_Call) RunAndReturn(run func(context.Context, model.User) error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
