// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebank/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserHelper is an autogenerated mock type for the UserHelper type
type UserHelper struct {
	mock.Mock
}

type UserHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *UserHelper) EXPECT() *UserHelper_Expecter {
	return &UserHelper_Expecter{mock: &_m.Mock}
}

// ValidateUser provides a mock function with given fields: ctx, userID
func (_m *UserHelper) ValidateUser(ctx context.Context, userID int64) (model.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserHelper_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type UserHelper_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *UserHelper_Expecter) ValidateUser(ctx interface{}, userID interface{}) *UserHelper_ValidateUser_Call {
	return &UserHelper_ValidateUser_Call{Call: _e.mock.On("ValidateUser", ctx, userID)}
}

func (_c *UserHelper_ValidateUser_Call) Run(run func(ctx context.Context, userID int64)) *UserHelper_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserHelper_ValidateUser_Call) Return(_a0 model.User, _a1 error) *UserHelper_ValidateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserHelper_ValidateUser_Call) RunAndReturn(run func(context.Context, int64) (model.User, error)) *UserHelper_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserHelper creates a new instance of UserHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHelper {
	mock := &UserHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
