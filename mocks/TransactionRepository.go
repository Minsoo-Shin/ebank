// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ebank/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) CreateTransaction(ctx context.Context, transaction model.Transaction) (model.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Transaction) (model.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Transaction) model.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type TransactionRepository_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction model.Transaction
func (_e *TransactionRepository_Expecter) CreateTransaction(ctx interface{}, transaction interface{}) *TransactionRepository_CreateTransaction_Call {
	return &TransactionRepository_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, transaction)}
}

func (_c *TransactionRepository_CreateTransaction_Call) Run(run func(ctx context.Context, transaction model.Transaction)) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_CreateTransaction_Call) Return(_a0 model.Transaction, _a1 error) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_CreateTransaction_Call) RunAndReturn(run func(context.Context, model.Transaction) (model.Transaction, error)) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionRepository) DeleteTransaction(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_DeleteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransaction'
type TransactionRepository_DeleteTransaction_Call struct {
	*mock.Call
}

// DeleteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *TransactionRepository_Expecter) DeleteTransaction(ctx interface{}, id interface{}) *TransactionRepository_DeleteTransaction_Call {
	return &TransactionRepository_DeleteTransaction_Call{Call: _e.mock.On("DeleteTransaction", ctx, id)}
}

func (_c *TransactionRepository_DeleteTransaction_Call) Run(run func(ctx context.Context, id int64)) *TransactionRepository_DeleteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *TransactionRepository_DeleteTransaction_Call) Return(_a0 error) *TransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_DeleteTransaction_Call) RunAndReturn(run func(context.Context, int64) error) *TransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactions provides a mock function with given fields: ctx
func (_m *TransactionRepository) GetAllTransactions(ctx context.Context) ([]model.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetAllTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactions'
type TransactionRepository_GetAllTransactions_Call struct {
	*mock.Call
}

// GetAllTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TransactionRepository_Expecter) GetAllTransactions(ctx interface{}) *TransactionRepository_GetAllTransactions_Call {
	return &TransactionRepository_GetAllTransactions_Call{Call: _e.mock.On("GetAllTransactions", ctx)}
}

func (_c *TransactionRepository_GetAllTransactions_Call) Run(run func(ctx context.Context)) *TransactionRepository_GetAllTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TransactionRepository_GetAllTransactions_Call) Return(_a0 []model.Transaction, _a1 error) *TransactionRepository_GetAllTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetAllTransactions_Call) RunAndReturn(run func(context.Context) ([]model.Transaction, error)) *TransactionRepository_GetAllTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: ctx, id
func (_m *TransactionRepository) GetTransactionByID(ctx context.Context, id int64) (model.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type TransactionRepository_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *TransactionRepository_Expecter) GetTransactionByID(ctx interface{}, id interface{}) *TransactionRepository_GetTransactionByID_Call {
	return &TransactionRepository_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, id)}
}

func (_c *TransactionRepository_GetTransactionByID_Call) Run(run func(ctx context.Context, id int64)) *TransactionRepository_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *TransactionRepository_GetTransactionByID_Call) Return(_a0 model.Transaction, _a1 error) *TransactionRepository_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetTransactionByID_Call) RunAndReturn(run func(context.Context, int64) (model.Transaction, error)) *TransactionRepository_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByAccountID provides a mock function with given fields: ctx, accountID
func (_m *TransactionRepository) GetTransactionsByAccountID(ctx context.Context, accountID int64) ([]model.Transaction, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByAccountID")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Transaction, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Transaction); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetTransactionsByAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByAccountID'
type TransactionRepository_GetTransactionsByAccountID_Call struct {
	*mock.Call
}

// GetTransactionsByAccountID is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *TransactionRepository_Expecter) GetTransactionsByAccountID(ctx interface{}, accountID interface{}) *TransactionRepository_GetTransactionsByAccountID_Call {
	return &TransactionRepository_GetTransactionsByAccountID_Call{Call: _e.mock.On("GetTransactionsByAccountID", ctx, accountID)}
}

func (_c *TransactionRepository_GetTransactionsByAccountID_Call) Run(run func(ctx context.Context, accountID int64)) *TransactionRepository_GetTransactionsByAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *TransactionRepository_GetTransactionsByAccountID_Call) Return(_a0 []model.Transaction, _a1 error) *TransactionRepository_GetTransactionsByAccountID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetTransactionsByAccountID_Call) RunAndReturn(run func(context.Context, int64) ([]model.Transaction, error)) *TransactionRepository_GetTransactionsByAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransaction provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) UpdateTransaction(ctx context.Context, transaction model.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_UpdateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransaction'
type TransactionRepository_UpdateTransaction_Call struct {
	*mock.Call
}

// UpdateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction model.Transaction
func (_e *TransactionRepository_Expecter) UpdateTransaction(ctx interface{}, transaction interface{}) *TransactionRepository_UpdateTransaction_Call {
	return &TransactionRepository_UpdateTransaction_Call{Call: _e.mock.On("UpdateTransaction", ctx, transaction)}
}

func (_c *TransactionRepository_UpdateTransaction_Call) Run(run func(ctx context.Context, transaction model.Transaction)) *TransactionRepository_UpdateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_UpdateTransaction_Call) Return(_a0 error) *TransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_UpdateTransaction_Call) RunAndReturn(run func(context.Context, model.Transaction) error) *TransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
